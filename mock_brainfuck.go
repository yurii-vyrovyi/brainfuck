// Code generated by MockGen. DO NOT EDIT.
// Source: test-interfaces.go

// Package brainfuck is a generated GoMock package.
package brainfuck

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTestInputReader is a mock of TestInputReader interface.
type MockTestInputReader struct {
	ctrl     *gomock.Controller
	recorder *MockTestInputReaderMockRecorder
}

// MockTestInputReaderMockRecorder is the mock recorder for MockTestInputReader.
type MockTestInputReaderMockRecorder struct {
	mock *MockTestInputReader
}

// NewMockTestInputReader creates a new mock instance.
func NewMockTestInputReader(ctrl *gomock.Controller) *MockTestInputReader {
	mock := &MockTestInputReader{ctrl: ctrl}
	mock.recorder = &MockTestInputReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestInputReader) EXPECT() *MockTestInputReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTestInputReader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTestInputReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTestInputReader)(nil).Close))
}

// Read mocks base method.
func (m *MockTestInputReader) Read(arg0 string) (TestDataType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(TestDataType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTestInputReaderMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTestInputReader)(nil).Read), arg0)
}

// MockTestOutputWriter is a mock of TestOutputWriter interface.
type MockTestOutputWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTestOutputWriterMockRecorder
}

// MockTestOutputWriterMockRecorder is the mock recorder for MockTestOutputWriter.
type MockTestOutputWriterMockRecorder struct {
	mock *MockTestOutputWriter
}

// NewMockTestOutputWriter creates a new mock instance.
func NewMockTestOutputWriter(ctrl *gomock.Controller) *MockTestOutputWriter {
	mock := &MockTestOutputWriter{ctrl: ctrl}
	mock.recorder = &MockTestOutputWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestOutputWriter) EXPECT() *MockTestOutputWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTestOutputWriter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTestOutputWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTestOutputWriter)(nil).Close))
}

// Write mocks base method.
func (m *MockTestOutputWriter) Write(arg0 TestDataType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockTestOutputWriterMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTestOutputWriter)(nil).Write), arg0)
}
