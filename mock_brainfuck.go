// Code generated by MockGen. DO NOT EDIT.
// Source: brainfuck.go

// Package brainfuck is a generated GoMock package.
package brainfuck

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInputReader is a mock of InputReader interface.
type MockInputReader struct {
	ctrl     *gomock.Controller
	recorder *MockInputReaderMockRecorder
}

// MockInputReaderMockRecorder is the mock recorder for MockInputReader.
type MockInputReaderMockRecorder struct {
	mock *MockInputReader
}

// NewMockInputReader creates a new mock instance.
func NewMockInputReader(ctrl *gomock.Controller) *MockInputReader {
	mock := &MockInputReader{ctrl: ctrl}
	mock.recorder = &MockInputReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInputReader) EXPECT() *MockInputReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockInputReader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockInputReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockInputReader)(nil).Close))
}

// Read mocks base method.
func (m *MockInputReader) Read(arg0 string) (CmdType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(CmdType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockInputReaderMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockInputReader)(nil).Read), arg0)
}
